@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Text.RegularExpressions
@using CodeAnalyzerWEB.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="analyzer-page">
    <div class="container analyzer-container">
        <div class="analyzer-header">
            <div class="header-title">
                <h3>Анализатор проекта с критериями</h3>
            </div>
            <button class="clear-history-btn" @onclick="ClearAnalysisHistory" title="Очистить историю">
                <i class="bi bi-trash"></i>
            </button>
        </div>

        <!-- Форма ввода -->
        <div class="input-form">
            <div class="form-group">
                <label>Путь к папке проекта:</label>
                <input @bind="folderPath" placeholder="Введите путь к папке..." class="form-control" />
            </div>

            <div class="form-group">
                <label>Режим анализа:</label>
                <select @bind="analysisMode" class="form-control">
                    <option value="Structural">Структурный (быстрый)</option>
                    <option value="FullContent">Полный (с анализом содержимого)</option>
                </select>
            </div>

            <div class="form-group">
                <label>Использовать Ollama для анализа:</label>
                <div>
                    <input type="checkbox" @bind="useOllama" id="useOllama" />
                    <label for="useOllama" style="margin-left: 8px;">Использовать AI-анализ</label>
                </div>
            </div>

            <div class="form-group">
                <label>Кастомный промпт для AI:</label>
                <textarea @bind="customPrompt" placeholder="Введите дополнительную инструкцию для AI-анализа..."
                          class="form-control" rows="3"></textarea>
            </div>

            <div class="form-group">
                <label>Критерии проверки:</label>
                <div class="criteria-list">
                    @foreach (var criterion in availableCriteria)
                    {
                        <div class="criterion-item">
                            <input type="checkbox"
                                   @bind="criterion.Selected"
                                   id="@criterion.Id" />
                            <label for="@criterion.Id">@criterion.Name</label>
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <label>Расширения файлов (через запятую):</label>
                <input @bind="extensionsInput" placeholder=".cs,.razor,.cshtml,.json" class="form-control" />
            </div>
        </div>

        <!-- Статус анализа -->
        <div class="analysis-status">
            @if (isAnalyzing)
            {
                <div class="status-info">
                    <div class="spinner"></div>
                    <span>Анализ выполняется...</span>
                </div>
            }
        </div>

        <!-- История анализа -->
        <ul class="analysis-history">
            @foreach (var message in analysisHistory)
            {
                <li class="@(message.Type == MessageType.User ? "user-message" : "bot-message")">
                    @if (message.Type == MessageType.User)
                    {
                        <div class="message-header">
                            <strong>Запрос анализа:</strong>
                        </div>
                        <div class="message-content">
                            <p><strong>Папка:</strong> @message.FolderPath</p>
                            <p><strong>Режим:</strong> @message.Mode</p>
                            <p><strong>Критерии:</strong> @string.Join(", ", message.Criteria)</p>
                            <p><strong>Ollama:</strong> @(message.UseOllama ? "Да" : "Нет")</p>
                            @if (!string.IsNullOrEmpty(message.CustomPrompt))
                            {
                                <p><strong>Кастомный промпт:</strong> @message.CustomPrompt</p>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="message-content formatted-content">
                            @if (message.StructureSummary != null)
                            {
                                <div class="structure-summary">
                                    <h4>📁 Структура проекта:</h4>
                                    <p>📄 Файлов: @message.StructureSummary.TotalFiles</p>
                                    <p>🎮 Контроллеров: @message.StructureSummary.Controllers</p>
                                    <p>📑 Страниц: @message.StructureSummary.Pages</p>
                                    <p>🔄 Миграций: @message.StructureSummary.Migrations</p>
                                    <p>🗄️ DbContext: @message.StructureSummary.DbContexts</p>
                                    <p>🔧 Сервисов: @message.StructureSummary.Services</p>
                                    @if (message.StructureSummary.ControllerNames?.Any() == true)
                                    {
                                        <details>
                                            <summary>Контроллеры (@message.StructureSummary.ControllerNames.Count):</summary>
                                            <div class="file-list">
                                                @foreach (var controller in message.StructureSummary.ControllerNames)
                                                {
                                                    <code>@controller</code>
                                                }
                                            </div>
                                        </details>
                                    }
                                </div>
                            }

                            @if (message.CriteriaResults?.Any() == true)
                            {
                                <div class="criteria-results">
                                    <h4>📊 Результаты проверки критериев:</h4>
                                    <div class="summary-stats">
                                        <span class="stat-passed">✅ Выполнено: @message.CriteriaResults.Count(r => r.Passed)</span>
                                        <span class="stat-failed">❌ Не выполнено: @message.CriteriaResults.Count(r => !r.Passed)</span>
                                        <span class="stat-total">📋 Всего: @message.CriteriaResults.Count</span>
                                    </div>
                                    @foreach (var result in message.CriteriaResults)
                                    {
                                        <div class="result-item @(result.Passed ? "passed" : "failed")">
                                            <div class="result-header">
                                                <strong>@result.CriteriaName</strong>
                                                <span class="status-badge">@(result.Passed ? "✅ PASS" : "❌ FAIL")</span>
                                            </div>
                                            <p class="result-message">@result.Message</p>
                                            @if (result.Evidence?.Any() == true)
                                            {
                                                <details class="evidence-details">
                                                    <summary>🔍 Детали проверки</summary>
                                                    <ul>
                                                        @foreach (var evidence in result.Evidence)
                                                        {
                                                            <li>@evidence</li>
                                                        }
                                                    </ul>
                                                </details>
                                            }
                                        </div>
                                    }
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(message.AiAnalysis))
                            {
                                <div class="ai-analysis">
                                    <h4>🤖 AI-анализ:</h4>
                                    <div class="ai-content">
                                        @((MarkupString)FormatMarkdown(message.AiAnalysis))
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(message.Text))
                            {
                                @if (message.Text.Contains("❌ Ошибка") || message.Text.Contains("Ошибка"))
                                {
                                    <div class="error-message">
                                        @((MarkupString)FormatMarkdown(message.Text))
                                    </div>
                                }
                                else
                                {
                                    <div class="info-message">
                                        @((MarkupString)FormatMarkdown(message.Text))
                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(message.Timestamp))
                    {
                        <div class="message-timestamp">
                            <small>@message.Timestamp</small>
                        </div>
                    }
                </li>
            }
        </ul>

        <!-- Кнопки управления -->
        <div class="input-container">
            <button @onclick="StartAnalysis" disabled="@isAnalyzing" class="btn btn-primary">
                @if (isAnalyzing)
                {
                    <span>🔄 Анализируется...</span>
                }
                else
                {
                    <span>🚀 Анализировать проект</span>
                }
            </button>

            <button @onclick="AnalyzeStructureOnly" disabled="@isAnalyzing" class="btn btn-secondary">
                📁 Только структура
            </button>
        </div>
    </div>
</div>

@code {
    private List<AnalysisMessage> analysisHistory = new();
    private string folderPath = string.Empty;
    private string analysisMode = "Structural";
    private string extensionsInput = ".cs,.razor,.cshtml,.json,.config";
    private string customPrompt = string.Empty;
    private bool isAnalyzing = false;
    private bool useOllama = true;

    private List<CriteriaOption> availableCriteria = new()
    {
        new CriteriaOption { Id = "controllers", Name = "Наличие контроллеров", Selected = true },
        new CriteriaOption { Id = "min_controllers", Name = "Минимум 3 контроллера", Selected = false },
        new CriteriaOption { Id = "pages", Name = "Наличие страниц", Selected = true },
        new CriteriaOption { Id = "min_pages", Name = "Минимум 2 страницы", Selected = false },
        new CriteriaOption { Id = "migrations", Name = "Наличие миграций", Selected = false },
        new CriteriaOption { Id = "dbcontext", Name = "Наличие DbContext", Selected = false },
        new CriteriaOption { Id = "services", Name = "Наличие сервисов", Selected = false }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalysisHistory();
    }

    private async Task LoadAnalysisHistory()
    {
        try
        {
            var historyJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "AnalysisHistory");
            if (!string.IsNullOrEmpty(historyJson))
            {
                analysisHistory = JsonSerializer.Deserialize<List<AnalysisMessage>>(historyJson) ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при загрузке истории: " + ex.Message);
        }

        if (!analysisHistory.Any())
        {
            analysisHistory.Add(new AnalysisMessage
                {
                    Text = "Введите путь к папке проекта и выберите критерии для анализа.",
                    Type = MessageType.Bot
                });
        }
    }

    private async Task SaveAnalysisHistory()
    {
        try
        {
            var historyJson = JsonSerializer.Serialize(analysisHistory);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "AnalysisHistory", historyJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при сохранении истории: " + ex.Message);
        }
    }

    private async Task ClearAnalysisHistory()
    {
        analysisHistory.Clear();
        analysisHistory.Add(new AnalysisMessage
            {
                Text = "Введите путь к папке проекта и выберите критерии для анализа.",
                Type = MessageType.Bot
            });
        await SaveAnalysisHistory();
        StateHasChanged();
    }

    private List<AnalysisCriteria> GetSelectedCriteria()
    {
        var criteria = new List<AnalysisCriteria>();

        foreach (var option in availableCriteria.Where(o => o.Selected))
        {
            var criterion = new AnalysisCriteria
                {
                    Id = option.Id,
                    Name = option.Name,
                    Description = option.Name,
                    Type = CriteriaType.Structural,
                    CreatedAt = DateTime.UtcNow,
                    Rules = new List<CriteriaRule>()
                };

            // Добавляем правила в зависимости от критерия
            criterion.Rules.Add(new CriteriaRule
                {
                    Property = option.Id switch
                    {
                        "controllers" => "controllers_count",
                        "min_controllers" => "controllers_count",
                        "pages" => "pages_count",
                        "min_pages" => "pages_count",
                        "migrations" => "migrations_count",
                        "dbcontext" => "dbcontext_count",
                        "services" => "services_count",
                        _ => option.Id
                    },
                    Operator = option.Id switch
                    {
                        "min_controllers" => "greater_than_or_equal",
                        "min_pages" => "greater_than_or_equal",
                        _ => "exists"
                    },
                    Value = option.Id switch
                    {
                        "min_controllers" => 3,
                        "min_pages" => 2,
                        _ => 1
                    },
                    ErrorMessage = option.Id switch
                    {
                        "controllers" => "Контроллеры не найдены",
                        "min_controllers" => "Недостаточно контроллеров (требуется минимум 3)",
                        "pages" => "Страницы не найдены",
                        "min_pages" => "Недостаточно страниц (требуется минимум 2)",
                        "migrations" => "Миграции не найдены",
                        "dbcontext" => "DbContext не найден",
                        "services" => "Сервисы не найдены",
                        _ => "Критерий не выполнен"
                    }
                });

            criteria.Add(criterion);
        }

        return criteria;
    }

    private async Task StartAnalysis()
    {
        if (string.IsNullOrWhiteSpace(folderPath))
            return;

        isAnalyzing = true;
        var selectedCriteria = GetSelectedCriteria();

        var userMessage = new AnalysisMessage
            {
                Type = MessageType.User,
                FolderPath = folderPath,
                Mode = analysisMode,
                Criteria = selectedCriteria.Select(c => c.Name).ToList(),
                UseOllama = useOllama,
                CustomPrompt = customPrompt,
                Timestamp = DateTime.Now.ToString("HH:mm:ss")
            };

        analysisHistory.Add(userMessage);
        await SaveAnalysisHistory();
        StateHasChanged();

        try
        {
            var request = new AnalysisRequest
                {
                    FolderPath = folderPath,
                    Criteria = selectedCriteria,
                    Extensions = extensionsInput.Split(',').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToList(),
                    UseOllama = useOllama,
                    CustomPrompt = customPrompt
                };

            var response = await Http.PostAsJsonAsync("https://localhost:7131/api/codeanalyzer/analyze", request);

            if (response.IsSuccessStatusCode)
            {
                var resultJson = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiAnalysisResponse>(resultJson, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (result?.Success == true)
                {
                    analysisHistory.Add(new AnalysisMessage
                        {
                            Type = MessageType.Bot,
                            StructureSummary = result.Structure,
                            CriteriaResults = result.CriteriaResults,
                            AiAnalysis = result.AiAnalysis,
                            Text = result.Summary?.Message ?? "Анализ завершен успешно",
                            Timestamp = DateTime.Now.ToString("HH:mm:ss")
                        });
                }
                else
                {
                    analysisHistory.Add(new AnalysisMessage
                        {
                            Type = MessageType.Bot,
                            Text = result?.Error ?? "Неизвестная ошибка",
                            Timestamp = DateTime.Now.ToString("HH:mm:ss")
                        });
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                analysisHistory.Add(new AnalysisMessage
                    {
                        Type = MessageType.Bot,
                        Text = $"❌ Ошибка сервера: {response.StatusCode}. {errorContent}",
                        Timestamp = DateTime.Now.ToString("HH:mm:ss")
                    });
            }
        }
        catch (Exception ex)
        {
            analysisHistory.Add(new AnalysisMessage
                {
                    Type = MessageType.Bot,
                    Text = $"❌ Ошибка при выполнении запроса: {ex.Message}",
                    Timestamp = DateTime.Now.ToString("HH:mm:ss")
                });
        }
        finally
        {
            isAnalyzing = false;
            await SaveAnalysisHistory();
            StateHasChanged();
        }
    }

    private async Task AnalyzeStructureOnly()
    {
        if (string.IsNullOrWhiteSpace(folderPath))
            return;

        isAnalyzing = true;

        analysisHistory.Add(new AnalysisMessage
            {
                Type = MessageType.User,
                FolderPath = folderPath,
                Mode = "Structural",
                Criteria = new List<string> { "Только структура" },
                UseOllama = false,
                Timestamp = DateTime.Now.ToString("HH:mm:ss")
            });

        await SaveAnalysisHistory();
        StateHasChanged();

        try
        {
            var request = new StructureAnalysisRequest
                {
                    FolderPath = folderPath,
                    Extensions = extensionsInput.Split(',').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToList()
                };

            var response = await Http.PostAsJsonAsync("https://localhost:7131/api/codeanalyzer/analyze-structure", request);

            if (response.IsSuccessStatusCode)
            {
                var resultJson = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiStructureAnalysisResponse>(resultJson, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (result?.Success == true)
                {
                    analysisHistory.Add(new AnalysisMessage
                        {
                            Type = MessageType.Bot,
                            StructureSummary = result.Summary,
                            Text = $"📁 Структурный анализ завершен. Файлов: {result.Summary?.TotalFiles ?? 0}, Контроллеров: {result.Summary?.Controllers ?? 0}, Страниц: {result.Summary?.Pages ?? 0}",
                            Timestamp = DateTime.Now.ToString("HH:mm:ss")
                        });
                }
                else
                {
                    analysisHistory.Add(new AnalysisMessage
                        {
                            Type = MessageType.Bot,
                            Text = result?.Error ?? "Ошибка при структурном анализе",
                            Timestamp = DateTime.Now.ToString("HH:mm:ss")
                        });
                }
            }
            else
            {
                analysisHistory.Add(new AnalysisMessage
                    {
                        Type = MessageType.Bot,
                        Text = $"❌ Ошибка сервера: {response.StatusCode}",
                        Timestamp = DateTime.Now.ToString("HH:mm:ss")
                    });
            }
        }
        catch (Exception ex)
        {
            analysisHistory.Add(new AnalysisMessage
                {
                    Type = MessageType.Bot,
                    Text = $"❌ Ошибка: {ex.Message}",
                    Timestamp = DateTime.Now.ToString("HH:mm:ss")
                });
        }
        finally
        {
            isAnalyzing = false;
            await SaveAnalysisHistory();
            StateHasChanged();
        }
    }

    private string FormatMarkdown(string markdownText)
    {
        if (string.IsNullOrEmpty(markdownText))
            return string.Empty;

        // Базовая обработка markdown
        var formatted = Regex.Replace(markdownText, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        formatted = Regex.Replace(formatted, @"\*(.*?)\*", "<em>$1</em>");
        formatted = Regex.Replace(formatted, @"`(.*?)`", "<code>$1</code>");
        formatted = Regex.Replace(formatted, @"\n", "<br />");
        formatted = Regex.Replace(formatted, @"✅", "✅");
        formatted = Regex.Replace(formatted, @"❌", "❌");

        return formatted;
    }

    // Вспомогательные классы для UI
    public class AnalysisMessage
    {
        public string Text { get; set; } = string.Empty;
        public MessageType Type { get; set; }
        public string FolderPath { get; set; } = string.Empty;
        public string Mode { get; set; } = string.Empty;
        public List<string> Criteria { get; set; } = new();
        public bool UseOllama { get; set; }
        public string CustomPrompt { get; set; } = string.Empty;
        public StructureSummary StructureSummary { get; set; }
        public List<CriteriaCheckResult> CriteriaResults { get; set; } = new();
        public string AiAnalysis { get; set; } = string.Empty;
        public string Timestamp { get; set; } = string.Empty;
    }

    public class CriteriaOption
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }

    public enum MessageType
    {
        User,
        Bot
    }

    // Классы для запросов API
    public class AnalysisRequest
    {
        public string FolderPath { get; set; } = string.Empty;
        public List<AnalysisCriteria> Criteria { get; set; } = new();
        public List<string> Extensions { get; set; } = new();
        public bool UseOllama { get; set; }
        public string CustomPrompt { get; set; } = string.Empty;
    }

    public class StructureAnalysisRequest
    {
        public string FolderPath { get; set; } = string.Empty;
        public List<string> Extensions { get; set; } = new();
    }

    public class ApiAnalysisResponse
    {
        public bool Success { get; set; }
        public StructureSummary Structure { get; set; }
        public List<CriteriaCheckResult> CriteriaResults { get; set; } = new();
        public string AiAnalysis { get; set; } = string.Empty;
        public AnalysisSummary Summary { get; set; }
        public string Error { get; set; } = string.Empty;
    }

    public class ApiStructureAnalysisResponse
    {
        public bool Success { get; set; }
        public ProjectStructure Structure { get; set; }
        public StructureSummary Summary { get; set; }
        public string Error { get; set; } = string.Empty;
    }

    public class StructureSummary
    {
        public int TotalFiles { get; set; }
        public int Controllers { get; set; }
        public int Pages { get; set; }
        public int Migrations { get; set; }
        public int DbContexts { get; set; }
        public int Services { get; set; }
        public List<string> ControllerNames { get; set; } = new();
        public List<string> FileNames { get; set; } = new();
    }

    public class AnalysisSummary
    {
        public int TotalCriteria { get; set; }
        public int PassedCriteria { get; set; }
        public int FailedCriteria { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    // Классы из API
    public class AnalysisCriteria
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public CriteriaType Type { get; set; }
        public List<CriteriaRule> Rules { get; set; } = new();
        public DateTime CreatedAt { get; set; }
    }

    public class CriteriaRule
    {
        public string Property { get; set; } = string.Empty;
        public string Operator { get; set; } = string.Empty;
        public object Value { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
    }

    public class CriteriaCheckResult
    {
        public string CriteriaId { get; set; } = string.Empty;
        public string CriteriaName { get; set; } = string.Empty;
        public bool Passed { get; set; }
        public string Message { get; set; } = string.Empty;
        public List<string> Evidence { get; set; } = new();
    }

    public enum CriteriaType
    {
        Structural,
        CodeQuality,
        Security
    }

    public class ProjectStructure
    {
        public int TotalFiles { get; set; }
        public int TotalControllers { get; set; }
        public int TotalPages { get; set; }
        public List<ProjectFile> Controllers { get; set; } = new();
        public List<ProjectFile> Files { get; set; } = new();
        public List<ProjectFile> Migrations { get; set; } = new();
        public List<ProjectFile> DbContexts { get; set; } = new();
        public List<ProjectFile> Services { get; set; } = new();
        public bool HasDatabaseConnection { get; set; }
        public List<string> DatabaseConnectionStrings { get; set; } = new();
        public List<string> MigrationCommands { get; set; } = new();
        public string Error { get; set; } = string.Empty;
    }

    public class ProjectFile
    {
        public string Name { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
        public long Size { get; set; }
        public DateTime LastModified { get; set; }
    }
}

<style>
    .analyzer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .analyzer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
    }

    .header-title h3 {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
    }

    .input-form {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 10px;
        margin-bottom: 25px;
        border: 1px solid #e9ecef;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
            display: block;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.15s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    textarea.form-control {
        resize: vertical;
        min-height: 80px;
    }

    .criteria-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 12px;
        margin-top: 10px;
    }

    .criterion-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
        background: white;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        transition: all 0.2s ease;
    }

        .criterion-item:hover {
            border-color: #007bff;
            background: #f8f9ff;
        }

        .criterion-item input[type="checkbox"] {
            transform: scale(1.2);
        }

    .analysis-history {
        list-style: none;
        padding: 0;
        margin: 0 0 25px 0;
        max-height: 600px;
        overflow-y: auto;
    }

    .user-message, .bot-message {
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .user-message {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border-left: 5px solid #2196f3;
    }

    .bot-message {
        background: linear-gradient(135deg, #f5f5f5, #eeeeee);
        border-left: 5px solid #4caf50;
    }

    .message-header {
        margin-bottom: 12px;
        font-size: 16px;
        color: #2c3e50;
    }

    .message-timestamp {
        margin-top: 15px;
        text-align: right;
        color: #6c757d;
        font-size: 12px;
    }

    .structure-summary, .criteria-results, .ai-analysis {
        margin-bottom: 20px;
        padding: 15px;
        background: white;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }

        .structure-summary h4, .criteria-results h4, .ai-analysis h4 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #2c3e50;
            font-size: 18px;
            border-bottom: 2px solid #f8f9fa;
            padding-bottom: 8px;
        }

    .summary-stats {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        padding: 12px;
        background: #f8f9fa;
        border-radius: 6px;
        font-weight: 600;
    }

    .stat-passed {
        color: #28a745;
    }

    .stat-failed {
        color: #dc3545;
    }

    .stat-total {
        color: #6c757d;
    }

    .result-item {
        padding: 15px;
        margin-bottom: 12px;
        border-radius: 8px;
        border-left: 4px solid;
        background: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

        .result-item.passed {
            border-left-color: #28a745;
            background: #f8fff9;
        }

        .result-item.failed {
            border-left-color: #dc3545;
            background: #fff8f8;
        }

    .result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .status-badge {
        font-weight: bold;
        font-size: 12px;
        padding: 4px 8px;
        border-radius: 4px;
    }

    .result-item.passed .status-badge {
        background: #28a745;
        color: white;
    }

    .result-item.failed .status-badge {
        background: #dc3545;
        color: white;
    }

    .result-message {
        margin: 0;
        color: #495057;
    }

    .evidence-details {
        margin-top: 10px;
    }

        .evidence-details summary {
            cursor: pointer;
            font-weight: 600;
            color: #007bff;
            padding: 5px 0;
        }

        .evidence-details ul {
            margin: 8px 0 0 0;
            padding-left: 20px;
        }

        .evidence-details li {
            margin-bottom: 4px;
            color: #6c757d;
            font-family: 'Courier New', monospace;
            font-size: 13px;
        }

    .file-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
    }

        .file-list code {
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid #e9ecef;
            font-size: 12px;
            color: #495057;
        }

    .ai-content {
        background: #fff3cd;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #ffc107;
        font-size: 14px;
        line-height: 1.5;
    }

    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #dc3545;
        margin-top: 15px;
    }

    .info-message {
        background: #d1ecf1;
        color: #0c5460;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #17a2b8;
        margin-top: 15px;
    }

    .input-container {
        display: flex;
        gap: 12px;
        justify-content: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        border: 1px solid #e9ecef;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.2s ease;
        min-width: 160px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
    }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #0056b3, #004085);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }

    .btn-secondary {
        background: linear-gradient(135deg, #6c757d, #545b62);
        color: white;
    }

        .btn-secondary:hover:not(:disabled) {
            background: linear-gradient(135deg, #545b62, #3d4246);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
        }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
        box-shadow: none !important;
    }

    .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        display: inline-block;
        margin-right: 12px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .analysis-status {
        text-align: center;
        padding: 15px;
        margin-bottom: 20px;
    }

    .status-info {
        display: inline-flex;
        align-items: center;
        background: #e7f3ff;
        padding: 12px 20px;
        border-radius: 25px;
        color: #007bff;
        font-weight: 600;
    }

    .clear-history-btn {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.2s ease;
    }

        .clear-history-btn:hover {
            background: linear-gradient(135deg, #c82333, #a71e2a);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

    .formatted-content code {
        background: #f8f9fa;
        padding: 2px 6px;
        border-radius: 3px;
        border: 1px solid #e9ecef;
        font-family: 'Courier New', monospace;
        font-size: 13px;
        color: #e83e8c;
    }

    .formatted-content strong {
        color: #2c3e50;
    }

    .formatted-content em {
        color: #6c757d;
        font-style: italic;
    }
</style>