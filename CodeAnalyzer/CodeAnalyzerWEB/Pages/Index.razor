@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="analyzer-page">
    <div class="container analyzer-container">
        <div class="analyzer-header">
            <div class="header-title">
                <h3>Анализатор проекта с критериями</h3>
            </div>
            <button class="clear-history-btn" @onclick="ClearAnalysisHistory" title="Очистить историю">
                <i class="bi bi-trash"></i>
            </button>
        </div>
        
        <div class="input-form">
            <div class="form-group">
                <label>Путь к папке проекта:</label>
                <input @bind="folderPath" placeholder="Введите путь к папке..." class="form-control" />
            </div>

            <div class="form-group">
                <label>Режим анализа:</label>
                <select @bind="analysisMode" class="form-control">
                    <option value="Structural">Структурный (быстрый)</option>
                    <option value="FullContent">Полный (с анализом содержимого)</option>
                </select>
                <small class="form-text text-muted">
                    @if (analysisMode == "Structural")
                    {
                        <span>🤖 AI-анализ отключен в структурном режиме</span>
                    }
                    else
                    {
                        <span>🤖 AI-анализ автоматически включен в полном режиме</span>
                    }
                </small>
            </div>

            <div class="form-group">
                <label>Кастомный промпт для AI:</label>
                <textarea @bind="customPrompt" placeholder="Введите дополнительную инструкцию для AI-анализа..."
                          class="form-control" rows="3" disabled="@(analysisMode == "Structural")"></textarea>
                @if (analysisMode == "Structural")
                {
                    <small class="form-text text-muted">Доступно только в полном режиме анализа</small>
                }
            </div>

            <div class="form-group">
                <label>Критерии проверки:</label>
                <div class="criteria-section">
                    <div class="criteria-tabs">
                        <button class="@(showStandardCriteria ? "tab-active" : "tab")" @onclick="ShowStandardCriteria">
                            Стандартные
                        </button>
                        <button class="@(!showStandardCriteria ? "tab-active" : "tab")" @onclick="ShowCustomCriteria">
                            Мои критерии (@customUserCriteria.Count)
                        </button>
                        <button class="btn btn-secondary" @onclick="ShowCustomCriteriaModal" style="margin-left: auto;">
                            + Создать критерий
                        </button>
                    </div>

                    @if (showStandardCriteria)
                    {
                        <div class="criteria-list">
                            @foreach (var criterion in standardCriteria)
                            {
                                <div class="criterion-item">
                                    <input type="checkbox"
                                           @bind="criterion.Selected"
                                           id="@($"std_{criterion.Id}")" />
                                    <label for="@($"std_{criterion.Id}")">@criterion.Name</label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="criteria-list">
                            @if (customUserCriteria.Any())
                            {
                                @foreach (var criterion in customUserCriteria)
                                {
                                    <div class="criterion-item custom-criterion">
                                        <div class="criterion-header">
                                            <input type="checkbox"
                                                   @bind="criterion.Selected"
                                                   id="@($"custom_{criterion.Id}")" />
                                            <label for="@($"custom_{criterion.Id}")">
                                                <span class="custom-badge">Пользовательский</span>
                                                @criterion.Name
                                            </label>
                                            <div class="criterion-actions">
                                                <button class="btn-icon" @onclick="() => EditCustomCriteria(criterion)" title="Редактировать">
                                                    ✏️
                                                </button>
                                                <button class="btn-icon btn-danger" @onclick="() => DeleteCustomCriteria(criterion.Id)" title="Удалить">
                                                    🗑️
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="no-criteria">
                                    <p>У вас пока нет кастомных критериев</p>
                                    <button class="btn btn-primary" @onclick="ShowCustomCriteriaModal">
                                        Создать первый критерий
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <label>Расширения файлов (через запятую):</label>
                <input @bind="extensionsInput" placeholder=".cs,.razor,.cshtml,.json" class="form-control" />
            </div>
        </div>

        <div class="analysis-status">
            @if (isAnalyzing)
            {
                <div class="status-info">
                    <div class="spinner"></div>
                    <span>Анализ выполняется...</span>
                </div>
            }
            @if (isCheckingConnection)
            {
                <div class="status-info">
                    <div class="spinner"></div>
                    <span>Проверка подключения к AI...</span>
                </div>
            }
        </div>

        <ul class="analysis-history">
            @foreach (var message in analysisHistory)
            {
                <li class="@(message.Type == MessageType.User ? "user-message" : "bot-message")">
                    @if (message.Type == MessageType.User)
                    {
                        <div class="message-header">
                            <strong>Запрос анализа:</strong>
                        </div>
                        <div class="message-content">
                            <p><strong>Папка:</strong> @message.FolderPath</p>
                            <p><strong>Режим:</strong> @message.Mode</p>
                            <p><strong>Критерии:</strong> @string.Join(", ", message.Criteria)</p>
                            <p><strong>AI-анализ:</strong> @(message.UseOllama ? "Да" : "Нет")</p>
                            @if (!string.IsNullOrEmpty(message.CustomPrompt))
                            {
                                <p><strong>Кастомный промпт:</strong> @message.CustomPrompt</p>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="message-content formatted-content">
                            @if (message.StructureSummary != null)
                            {
                                <div class="structure-summary">
                                    <h4>📁 Структура проекта:</h4>
                                    <p>📄 Файлов: @message.StructureSummary.TotalFiles</p>
                                    <p>🎮 Контроллеров: @message.StructureSummary.Controllers</p>
                                    <p>📑 Страниц: @message.StructureSummary.Pages</p>
                                    <p>🔄 Миграций: @message.StructureSummary.Migrations</p>
                                    <p>🗄️ DbContext: @message.StructureSummary.DbContexts</p>
                                    <p>🔧 Сервисов: @message.StructureSummary.Services</p>
                                    @if (message.StructureSummary.ControllerNames?.Any() == true)
                                    {
                                        <details>
                                            <summary>Контроллеры (@message.StructureSummary.ControllerNames.Count):</summary>
                                            <div class="file-list">
                                                @foreach (var controller in message.StructureSummary.ControllerNames)
                                                {
                                                    <code>@controller</code>
                                                }
                                            </div>
                                        </details>
                                    }
                                </div>
                            }

                            @if (message.CriteriaResults?.Any() == true)
                            {
                                <div class="criteria-results">
                                    <h4>📊 Результаты проверки критериев:</h4>
                                    <div class="summary-stats">
                                        <span class="stat-passed">✅ Выполнено: @message.CriteriaResults.Count(r => r.Passed)</span>
                                        <span class="stat-failed">❌ Не выполнено: @message.CriteriaResults.Count(r => !r.Passed)</span>
                                        <span class="stat-total">📋 Всего: @message.CriteriaResults.Count</span>
                                    </div>
                                    @foreach (var result in message.CriteriaResults)
                                    {
                                        <div class="result-item @(result.Passed ? "passed" : "failed")">
                                            <div class="result-header">
                                                <strong>@result.CriteriaName</strong>
                                                <span class="status-badge">@(result.Passed ? "✅ PASS" : "❌ FAIL")</span>
                                            </div>
                                            <p class="result-message">@result.Message</p>
                                            @if (result.Evidence?.Any() == true)
                                            {
                                                <details class="evidence-details">
                                                    <summary>🔍 Детали проверки</summary>
                                                    <ul>
                                                        @foreach (var evidence in result.Evidence)
                                                        {
                                                            <li>@evidence</li>
                                                        }
                                                    </ul>
                                                </details>
                                            }
                                        </div>
                                    }
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(message.AiAnalysis))
                            {
                                <div class="ai-analysis">
                                    <h4>🤖 AI-анализ:</h4>
                                    <div class="ai-content">
                                        @((MarkupString)FormatMarkdown(message.AiAnalysis))
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(message.Text))
                            {
                                @if (message.Text.Contains("❌ Ошибка") || message.Text.Contains("Ошибка"))
                                {
                                    <div class="error-message">
                                        @((MarkupString)FormatMarkdown(message.Text))
                                    </div>
                                }
                                else
                                {
                                    <div class="info-message">
                                        @((MarkupString)FormatMarkdown(message.Text))
                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(message.Timestamp))
                    {
                        <div class="message-timestamp">
                            <small>@message.Timestamp</small>
                        </div>
                    }
                </li>
            }
        </ul>

        <div class="input-container">
            <button @onclick="StartAnalysis" disabled="@isAnalyzing" class="btn btn-primary">
                @if (isAnalyzing)
                {
                    <span>🔄 Анализируется...</span>
                }
                else
                {
                    <span>🚀 Анализировать проект</span>
                }
            </button>
        </div>
    </div>
</div>

@if (showCustomCriteriaModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h4>@(editingCriteria == null ? "Создание критерия" : "Редактирование критерия")</h4>
                <button class="btn-close" @onclick="CloseCustomCriteriaModal">×</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Название критерия:</label>
                    <input @bind="newCriteriaName" class="form-control" placeholder="Введите название критерия" />
                </div>
                <div class="form-group">
                    <label>Описание:</label>
                    <textarea @bind="newCriteriaDescription" class="form-control" placeholder="Введите описание критерия" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>Правила:</label>
                    <div class="rules-container">
                        @foreach (var rule in newCriteriaRules)
                        {
                            <div class="rule-item">
                                <div class="rule-row">
                                    <select @bind="rule.Property" class="form-control">
                                        <option value="controllers_count">Количество контроллеров</option>
                                        <option value="pages_count">Количество страниц</option>
                                        <option value="dbcontext_count">Количество DbContext</option>
                                        <option value="migrations_count">Количество миграций</option>
                                        <option value="services_count">Количество сервисов</option>
                                        <option value="files_count">Количество файлов</option>
                                        <option value="models_count">Количество моделей</option>
                                        <option value="config_files_count">Количество конфигурационных файлов</option>
                                        <option value="has_database_connection">Наличие подключения к БД</option>
                                        <option value="database_connections_count">Количество подключений к БД</option>
                                        <option value="migration_commands_count">Количество команд миграции</option>
                                    </select>
                                    <select @bind="rule.Operator" class="form-control">
                                        <option value="exists">Существует</option>
                                        <option value="equals">Равно</option>
                                        <option value="greater_than">Больше чем</option>
                                        <option value="greater_than_or_equal">Больше или равно</option>
                                        <option value="less_than">Меньше чем</option>
                                        <option value="less_than_or_equal">Меньше или равно</option>
                                    </select>
                                    <input @bind="rule.Value" class="form-control" placeholder="Значение" />
                                    <button class="btn-icon btn-danger" @onclick="() => RemoveRule(rule)">×</button>
                                </div>
                                <input @bind="rule.ErrorMessage" class="form-control" placeholder="Сообщение об ошибке (опционально)" />
                            </div>
                        }
                        <button class="btn btn-secondary" @onclick="AddRule">+ Добавить правило</button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseCustomCriteriaModal">Отмена</button>
                <button class="btn btn-primary" @onclick="SaveCustomCriteria">Сохранить</button>
            </div>
        </div>
    </div>
}

@code {
    private List<AnalysisMessage> analysisHistory = new();
    private string folderPath = string.Empty;
    private string analysisMode = "Structural";
    private string extensionsInput = ".cs,.razor,.cshtml,.json,.config";
    private string customPrompt = string.Empty;
    private bool isAnalyzing = false;
    private bool isCheckingConnection = false;
    private bool showStandardCriteria = true;
    private bool showCustomCriteriaModal = false;
    private string newCriteriaName = string.Empty;
    private string newCriteriaDescription = string.Empty;
    private List<CriteriaRule> newCriteriaRules = new();
    private AnalysisCriteria editingCriteria = null;

    private List<AnalysisCriteria> standardCriteria = new()
    {
        new AnalysisCriteria
        {
            Id = "controllers",
            Name = "Наличие контроллеров",
            Description = "Проверяет наличие контроллеров в проекте",
            Type = CriteriaType.Structural,
            Selected = true,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "controllers_count", Operator = "exists", Value = "1" }
            }
        },
        new AnalysisCriteria
        {
            Id = "min_controllers",
            Name = "Минимум 3 контроллера",
            Description = "Проверяет, что в проекте не менее 3 контроллеров",
            Type = CriteriaType.Structural,
            Selected = false,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "controllers_count", Operator = "greater_than_or_equal", Value = "3" }
            }
        },
        new AnalysisCriteria
        {
            Id = "pages",
            Name = "Наличие страниц",
            Description = "Проверяет наличие Razor/Blazor страниц",
            Type = CriteriaType.Structural,
            Selected = true,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "pages_count", Operator = "exists", Value = "1" }
            }
        },
        new AnalysisCriteria
        {
            Id = "min_pages",
            Name = "Минимум 2 страницы",
            Description = "Проверяет, что в проекте не менее 2 страниц",
            Type = CriteriaType.Structural,
            Selected = false,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "pages_count", Operator = "greater_than_or_equal", Value = "2" }
            }
        },
        new AnalysisCriteria
        {
            Id = "migrations",
            Name = "Наличие миграций",
            Description = "Проверяет наличие миграций Entity Framework",
            Type = CriteriaType.Structural,
            Selected = false,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "migrations_count", Operator = "exists", Value = "1" }
            }
        },
        new AnalysisCriteria
        {
            Id = "dbcontext",
            Name = "Наличие DbContext",
            Description = "Проверяет наличие классов DbContext",
            Type = CriteriaType.Structural,
            Selected = false,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "dbcontext_count", Operator = "exists", Value = "1" }
            }
        },
        new AnalysisCriteria
        {
            Id = "services",
            Name = "Наличие сервисов",
            Description = "Проверяет наличие сервисных классов",
            Type = CriteriaType.Structural,
            Selected = false,
            Rules = new List<CriteriaRule>
            {
                new CriteriaRule { Property = "services_count", Operator = "exists", Value = "1" }
            }
        }
    };

    private List<AnalysisCriteria> customUserCriteria = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalysisHistory();
        await LoadCustomCriteria();
    }

    private async Task LoadCustomCriteria()
    {
        try
        {
            var criteriaJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "CustomCriteria");
            if (!string.IsNullOrEmpty(criteriaJson))
            {
                customUserCriteria = JsonSerializer.Deserialize<List<AnalysisCriteria>>(criteriaJson) ?? new List<AnalysisCriteria>();
                foreach (var criteria in customUserCriteria)
                {
                    criteria.Selected = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при загрузке кастомных критериев: " + ex.Message);
        }
    }

    private async Task SaveCustomCriteriaToStorage()
    {
        try
        {
            var criteriaJson = JsonSerializer.Serialize(customUserCriteria);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "CustomCriteria", criteriaJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при сохранении кастомных критериев: " + ex.Message);
        }
    }

    private async Task LoadAnalysisHistory()
    {
        try
        {
            var historyJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "AnalysisHistory");
            if (!string.IsNullOrEmpty(historyJson))
            {
                analysisHistory = JsonSerializer.Deserialize<List<AnalysisMessage>>(historyJson) ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при загрузке истории: " + ex.Message);
        }

        if (!analysisHistory.Any())
        {
            analysisHistory.Add(new AnalysisMessage
            {
                Text = "Введите путь к папке проекта и выберите критерии для анализа.",
                Type = MessageType.Bot
            });
        }
    }

    private async Task SaveAnalysisHistory()
    {
        try
        {
            var historyJson = JsonSerializer.Serialize(analysisHistory);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "AnalysisHistory", historyJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при сохранении истории: " + ex.Message);
        }
    }

    private async Task ClearAnalysisHistory()
    {
        analysisHistory.Clear();
        analysisHistory.Add(new AnalysisMessage
        {
            Text = "Введите путь к папке проекта и выберите критерии для анализа.",
            Type = MessageType.Bot
        });
        await SaveAnalysisHistory();
        StateHasChanged();
    }

    private void ShowStandardCriteria()
    {
        showStandardCriteria = true;
        StateHasChanged();
    }

    private void ShowCustomCriteria()
    {
        showStandardCriteria = false;
        StateHasChanged();
    }

    private void ShowCustomCriteriaModal()
    {
        newCriteriaName = string.Empty;
        newCriteriaDescription = string.Empty;
        newCriteriaRules = new List<CriteriaRule> { new CriteriaRule() };
        editingCriteria = null;
        showCustomCriteriaModal = true;
        StateHasChanged();
    }

    private void CloseCustomCriteriaModal()
    {
        showCustomCriteriaModal = false;
        StateHasChanged();
    }

    private void AddRule()
    {
        newCriteriaRules.Add(new CriteriaRule());
        StateHasChanged();
    }

    private void RemoveRule(CriteriaRule rule)
    {
        if (newCriteriaRules.Count > 1)
        {
            newCriteriaRules.Remove(rule);
            StateHasChanged();
        }
    }

    private void EditCustomCriteria(AnalysisCriteria criteria)
    {
        newCriteriaName = criteria.Name;
        newCriteriaDescription = criteria.Description;
        newCriteriaRules = criteria.Rules.ToList();
        editingCriteria = criteria;
        showCustomCriteriaModal = true;
        StateHasChanged();
    }

    private async Task DeleteCustomCriteria(string criteriaId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот критерий?"))
        {
            customUserCriteria.RemoveAll(c => c.Id == criteriaId);
            await SaveCustomCriteriaToStorage();
            StateHasChanged();
        }
    }

    private async Task SaveCustomCriteria()
    {
        if (string.IsNullOrWhiteSpace(newCriteriaName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите название критерия");
            return;
        }

        if (newCriteriaRules.Any(r => string.IsNullOrEmpty(r.Property) || string.IsNullOrEmpty(r.Operator)))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Заполните все поля правил");
            return;
        }

        if (editingCriteria == null)
        {
            var newCriteria = new AnalysisCriteria
            {
                Id = Guid.NewGuid().ToString(),
                Name = newCriteriaName,
                Description = newCriteriaDescription,
                Type = CriteriaType.Structural,
                Rules = newCriteriaRules,
                IsCustom = true,
                Selected = true,
                CreatedAt = DateTime.UtcNow
            };
            customUserCriteria.Add(newCriteria);
        }
        else
        {
            editingCriteria.Name = newCriteriaName;
            editingCriteria.Description = newCriteriaDescription;
            editingCriteria.Rules = newCriteriaRules;
        }

        await SaveCustomCriteriaToStorage();
        CloseCustomCriteriaModal();
        StateHasChanged();
    }

    private List<AnalysisCriteria> GetSelectedCriteria()
    {
        var criteria = new List<AnalysisCriteria>();

        criteria.AddRange(standardCriteria.Where(c => c.Selected));
        criteria.AddRange(customUserCriteria.Where(c => c.Selected));

        return criteria;
    }

    private async Task<bool> CheckOllamaConnection()
    {
        try
        {
            isCheckingConnection = true;
            StateHasChanged();

            var response = await Http.GetAsync("https://localhost:7131/api/codeanalyzer/check-connection");

            if (response.IsSuccessStatusCode)
            {
                var resultJson = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ConnectionCheckResponse>(resultJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                return result?.Connected == true;
            }

            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при проверке подключения: {ex.Message}");
            return false;
        }
        finally
        {
            isCheckingConnection = false;
            StateHasChanged();
        }
    }

    private async Task StartAnalysis()
    {
        if (string.IsNullOrWhiteSpace(folderPath))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите путь к папке проекта");
            return;
        }

        var selectedCriteria = GetSelectedCriteria();
        if (!selectedCriteria.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Выберите хотя бы один критерий для проверки");
            return;
        }

        bool useOllama = analysisMode == "FullContent";

        if (useOllama)
        {
            analysisHistory.Add(new AnalysisMessage
            {
                Type = MessageType.Bot,
                Text = "🔍 Проверка подключения к AI...",
                Timestamp = DateTime.Now.ToString("HH:mm:ss")
            });
            await SaveAnalysisHistory();
            StateHasChanged();

            var isConnected = await CheckOllamaConnection();

            if (!isConnected)
            {
                analysisHistory.Add(new AnalysisMessage
                {
                    Type = MessageType.Bot,
                    Text = "❌ Ошибка: Не удалось подключиться к AI-сервису. AI-анализ будет отключен.",
                    Timestamp = DateTime.Now.ToString("HH:mm:ss")
                });
                useOllama = false;
            }
            else
            {
                analysisHistory.Add(new AnalysisMessage
                {
                    Type = MessageType.Bot,
                    Text = "✅ Подключение к AI успешно установлено",
                    Timestamp = DateTime.Now.ToString("HH:mm:ss")
                });
            }
            await SaveAnalysisHistory();
            StateHasChanged();
        }

        isAnalyzing = true;
        StateHasChanged();

        var userMessage = new AnalysisMessage
        {
            Type = MessageType.User,
            FolderPath = folderPath,
            Mode = analysisMode,
            Criteria = selectedCriteria.Select(c => c.Name).ToList(),
            UseOllama = useOllama,
            CustomPrompt = customPrompt,
            Timestamp = DateTime.Now.ToString("HH:mm:ss")
        };

        analysisHistory.Add(userMessage);
        await SaveAnalysisHistory();
        StateHasChanged();

        try
        {
            var request = new AnalysisRequest
            {
                FolderPath = folderPath,
                Criteria = selectedCriteria,
                Extensions = extensionsInput.Split(',').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToList(),
                UseOllama = useOllama,
                CustomPrompt = customPrompt
            };

            var response = await Http.PostAsJsonAsync("https://localhost:7131/api/codeanalyzer/analyze", request);

            if (response.IsSuccessStatusCode)
            {
                var resultJson = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiAnalysisResponse>(resultJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (result?.Success == true)
                {
                    analysisHistory.Add(new AnalysisMessage
                    {
                        Type = MessageType.Bot,
                        StructureSummary = result.Structure,
                        CriteriaResults = result.CriteriaResults,
                        AiAnalysis = result.AiAnalysis,
                        Text = result.Summary?.Message ?? "Анализ завершен успешно",
                        Timestamp = DateTime.Now.ToString("HH:mm:ss")
                    });
                }
                else
                {
                    analysisHistory.Add(new AnalysisMessage
                    {
                        Type = MessageType.Bot,
                        Text = result?.Error ?? "Неизвестная ошибка",
                        Timestamp = DateTime.Now.ToString("HH:mm:ss")
                    });
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                analysisHistory.Add(new AnalysisMessage
                {
                    Type = MessageType.Bot,
                    Text = $"❌ Ошибка сервера: {response.StatusCode}. {errorContent}",
                    Timestamp = DateTime.Now.ToString("HH:mm:ss")
                });
            }
        }
        catch (Exception ex)
        {
            analysisHistory.Add(new AnalysisMessage
            {
                Type = MessageType.Bot,
                Text = $"❌ Ошибка при выполнении запроса: {ex.Message}",
                Timestamp = DateTime.Now.ToString("HH:mm:ss")
            });
        }
        finally
        {
            isAnalyzing = false;
            await SaveAnalysisHistory();
            StateHasChanged();
        }
    }

    private string FormatMarkdown(string markdownText)
    {
        if (string.IsNullOrEmpty(markdownText))
            return string.Empty;

        var formatted = Regex.Replace(markdownText, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        formatted = Regex.Replace(formatted, @"\*(.*?)\*", "<em>$1</em>");
        formatted = Regex.Replace(formatted, @"`(.*?)`", "<code>$1</code>");
        formatted = Regex.Replace(formatted, @"\n", "<br />");
        formatted = Regex.Replace(formatted, @"✅", "✅");
        formatted = Regex.Replace(formatted, @"❌", "❌");

        return formatted;
    }
}
<style>
    .analyzer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .analyzer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
    }

    .header-title h3 {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
    }

    .input-form {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 10px;
        margin-bottom: 25px;
        border: 1px solid #e9ecef;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
            display: block;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.15s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    textarea.form-control {
        resize: vertical;
        min-height: 80px;
    }

    .criteria-section {
        border: 1px solid #e9ecef;
        border-radius: 6px;
        overflow: hidden;
    }

    .criteria-tabs {
        display: flex;
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        padding: 10px;
        align-items: center;
    }

    .tab {
        padding: 8px 16px;
        background: none;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s ease;
        border-radius: 4px;
        margin-right: 10px;
    }

    .tab-active {
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border: none;
        cursor: pointer;
        font-weight: 600;
        border-radius: 4px;
        margin-right: 10px;
    }

    .tab:hover:not(.tab-active) {
        background: #e9ecef;
    }

    .criteria-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 12px;
        margin-top: 10px;
        padding: 15px;
    }

    .criterion-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
        background: white;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        transition: all 0.2s ease;
    }

        .criterion-item:hover {
            border-color: #007bff;
            background: #f8f9ff;
        }

        .criterion-item input[type="checkbox"] {
            transform: scale(1.2);
        }

    .custom-criterion {
        background: #f0f8ff;
        border-left: 3px solid #007bff;
    }

    .criterion-header {
        display: flex;
        align-items: center;
        gap: 10px;
        width: 100%;
    }

    .custom-badge {
        background: #007bff;
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 10px;
        margin-right: 8px;
    }

    .criterion-actions {
        margin-left: auto;
        display: flex;
        gap: 5px;
    }

    .btn-icon {
        background: none;
        border: none;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
        transition: background 0.2s ease;
        font-size: 14px;
    }

        .btn-icon:hover {
            background: #e9ecef;
        }

    .btn-danger {
        color: #dc3545;
    }

        .btn-danger:hover {
            background: #f8d7da;
        }

    .no-criteria {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
        grid-column: 1 / -1;
    }

    .analysis-history {
        list-style: none;
        padding: 0;
        margin: 0 0 25px 0;
        max-height: 600px;
        overflow-y: auto;
    }

    .user-message, .bot-message {
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .user-message {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border-left: 5px solid #2196f3;
    }

    .bot-message {
        background: linear-gradient(135deg, #f5f5f5, #eeeeee);
        border-left: 5px solid #4caf50;
    }

    .message-header {
        margin-bottom: 12px;
        font-size: 16px;
        color: #2c3e50;
    }

    .message-timestamp {
        margin-top: 15px;
        text-align: right;
        color: #6c757d;
        font-size: 12px;
    }

    .structure-summary, .criteria-results, .ai-analysis {
        margin-bottom: 20px;
        padding: 15px;
        background: white;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }

        .structure-summary h4, .criteria-results h4, .ai-analysis h4 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #2c3e50;
            font-size: 18px;
            border-bottom: 2px solid #f8f9fa;
            padding-bottom: 8px;
        }

    .summary-stats {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        padding: 12px;
        background: #f8f9fa;
        border-radius: 6px;
        font-weight: 600;
    }

    .stat-passed {
        color: #28a745;
    }

    .stat-failed {
        color: #dc3545;
    }

    .stat-total {
        color: #6c757d;
    }

    .result-item {
        padding: 15px;
        margin-bottom: 12px;
        border-radius: 8px;
        border-left: 4px solid;
        background: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

        .result-item.passed {
            border-left-color: #28a745;
            background: #f8fff9;
        }

        .result-item.failed {
            border-left-color: #dc3545;
            background: #fff8f8;
        }

    .result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .status-badge {
        font-weight: bold;
        font-size: 12px;
        padding: 4px 8px;
        border-radius: 4px;
    }

    .result-item.passed .status-badge {
        background: #28a745;
        color: white;
    }

    .result-item.failed .status-badge {
        background: #dc3545;
        color: white;
    }

    .result-message {
        margin: 0;
        color: #495057;
    }

    .evidence-details {
        margin-top: 10px;
    }

        .evidence-details summary {
            cursor: pointer;
            font-weight: 600;
            color: #007bff;
            padding: 5px 0;
        }

        .evidence-details ul {
            margin: 8px 0 0 0;
            padding-left: 20px;
        }

        .evidence-details li {
            margin-bottom: 4px;
            color: #6c757d;
            font-family: 'Courier New', monospace;
            font-size: 13px;
        }

    .file-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
    }

        .file-list code {
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid #e9ecef;
            font-size: 12px;
            color: #495057;
        }

    .ai-content {
        background: #fff3cd;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #ffc107;
        font-size: 14px;
        line-height: 1.5;
    }

    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #dc3545;
        margin-top: 15px;
    }

    .info-message {
        background: #d1ecf1;
        color: #0c5460;
        padding: 15px;
        border-radius: 6px;
        border-left: 4px solid #17a2b8;
        margin-top: 15px;
    }

    .input-container {
        display: flex;
        gap: 12px;
        justify-content: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        border: 1px solid #e9ecef;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.2s ease;
        min-width: 160px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
    }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #0056b3, #004085);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }

    .btn-secondary {
        background: linear-gradient(135deg, #6c757d, #545b62);
        color: white;
    }

        .btn-secondary:hover:not(:disabled) {
            background: linear-gradient(135deg, #545b62, #3d4246);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
        }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
        box-shadow: none !important;
    }

    .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        display: inline-block;
        margin-right: 12px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .analysis-status {
        text-align: center;
        padding: 15px;
        margin-bottom: 20px;
    }

    .status-info {
        display: inline-flex;
        align-items: center;
        background: #e7f3ff;
        padding: 12px 20px;
        border-radius: 25px;
        color: #007bff;
        font-weight: 600;
    }

    .clear-history-btn {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.2s ease;
    }

        .clear-history-btn:hover {
            background: linear-gradient(135deg, #c82333, #a71e2a);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

    .formatted-content code {
        background: #f8f9fa;
        padding: 2px 6px;
        border-radius: 3px;
        border: 1px solid #e9ecef;
        font-family: 'Courier New', monospace;
        font-size: 13px;
        color: #e83e8c;
    }

    .formatted-content strong {
        color: #2c3e50;
    }

    .formatted-content em {
        color: #6c757d;
        font-style: italic;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding: 20px;
        border-top: 1px solid #e9ecef;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6c757d;
    }

    .rules-container {
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 15px;
    }

    .rule-item {
        margin-bottom: 15px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 6px;
    }

    .rule-row {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr auto;
        gap: 10px;
        margin-bottom: 10px;
        align-items: center;
    }
</style>